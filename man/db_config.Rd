% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_config.R
\name{db_config}
\alias{db_config}
\alias{get_db_config}
\alias{validate_db_config}
\title{Database Configuration}
\usage{
get_db_config(
  key = NULL,
  file = Sys.getenv("R_CONFIG_FILE", pkg_sys("config/config.yml")),
  config = Sys.getenv("R_CONFIG_ACTIVE", "default")
)

validate_db_config(
  cfg,
  arg = rlang::caller_arg(cfg),
  call = rlang::caller_env()
)
}
\arguments{
\item{key}{Character string representing the configuration key to retrieve.
Defaults to \code{NULL} which returns the full configuration list.}

\item{file}{A character string representing the path to the configuration file.}

\item{config}{A character string representing the configuration to use from the
configuration file.}

\item{cfg}{List containing the configuration values or a string to the path
of a configuration file. If \code{NULL}, the default configuration file path will be used.}
}
\value{
\itemize{
\item \code{get_db_config()}: A list, or vector (if \code{key} is specified), corresponding to the contents of the \code{db}
configuration key's values (i.e. \code{dbname}, \code{host}, \code{port}, \code{username}, and \code{password}). If \code{key} is specified,
the function will return the value corresponding to the specified key.
\item \code{validate_db_config()}: An invisible \code{NULL} if the configuration is valid. The function will throw an error if the
configuration is invalid.
}
}
\description{
Functions to retrieve and validate the database configuration.
\itemize{
\item \code{get_db_config()}: retrieves the database configuration from the specified
configuration file and returns the configuration as a list. You can
optionally specify a key to retrieve a specific configuration value.
\item \code{validate_db_config()}: validates the database configuration to ensure all
required configuration keys are present.
}
}
\seealso{
\code{\link[=db_connect]{db_connect()}}
}
